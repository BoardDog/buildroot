--- a/src/wpeframework/renderer-backend.cpp
+++ b/src/wpeframework/renderer-backend.cpp
@@ -34,6 +34,17 @@
 #include <string>
 #include <string.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+#include <dlfcn.h>
+#ifdef __cplusplus
+}
+#endif
+
 namespace WPEFramework {
 
 struct EGLTarget : public IPC::Client::Handler {
@@ -179,10 +190,100 @@
     // frame_will_render
     [](void* data)
     {
+        constexpr char const * const _lib = "libcompositorclient.so";
+
+        {
+            constexpr char const * const _func = "WillRenderEGLTargetFor";
+
+            void * _sym  = dlsym (RTLD_NEXT, _func);
+
+            if (_sym != nullptr && data != nullptr) {
+                Dl_info _info;
+
+                /* char * */dlerror ();
+
+                if (dladdr (_sym, &_info) == 0) {
+                    // Error
+                    fprintf (stderr, "Unable to verify %s exist in %s.\n", _func, _lib);
+                }
+                else {
+                    std::string _str (_info.dli_fname);
+
+                    if (_str.rfind(_lib) != std::string::npos) {
+                        // Found in library _lib
+
+                       reinterpret_cast < bool (*) (EGLNativeWindowType) > (_sym) ( static_cast < WPEFramework::EGLTarget* > (data) -> Native() );
+                    }
+                    else {
+                        // Different library
+                        fprintf (stderr, "%s not found in %s.\n", _func, _lib);
+                    }
+                }
+            }
+        }
+
+        {
+            constexpr char const * const _func = "SetEGLTarget";
+
+            void * _sym  = dlsym (RTLD_NEXT, _func);
+
+            if (_sym != nullptr && data != nullptr) {
+                Dl_info _info;
+
+                /* char * */dlerror ();
+
+                if (dladdr (_sym, &_info) == 0) {
+                    // Error
+                    fprintf (stderr, "Unable to verify %s exist in %s.\n", _func, _lib);
+                }
+                else {
+                    std::string _str (_info.dli_fname);
+
+                    if (_str.rfind(_lib) != std::string::npos) {
+                        // Found in library _lib
+
+                       reinterpret_cast < bool (*) () > (_sym) ();
+                    }
+                    else {
+                        // Different library
+                        fprintf (stderr, "%s not found in %s.\n", _func, _lib);
+                    }
+                }
+            }
+        }
     },
     // frame_rendered
     [](void* data)
     {
+        constexpr char const * const _lib = "libcompositorclient.so";
+        constexpr char const * const _func = "RenderedEGLTarget";
+
+        void * _sym  = dlsym (RTLD_NEXT, _func);
+
+        if (_sym != nullptr && data != nullptr) {
+            Dl_info _info;
+
+            /* char * */dlerror ();
+
+            if (dladdr (_sym, &_info) == 0) {
+                // Error
+                fprintf (stderr, "Unable to verify %s exist in %s.\n", _func, _lib);
+            }
+            else {
+                std::string _str (_info.dli_fname);
+
+                if (_str.rfind(_lib) != std::string::npos) {
+                    // Found in library _lib
+
+                   reinterpret_cast < bool (*) () > (_sym) ();
+                }
+                else {
+                    // Different library
+                    fprintf (stderr, "%s not found in %s.\n", _func, _lib);
+                }
+            }
+        }
+
         WPEFramework::EGLTarget& target (*static_cast<WPEFramework::EGLTarget*>(data));
 
         /* bool */ target.display.vSyncCallback ();

diff -ruN wpeframework.orig/Source/core/IPFrame.h wpeframework/Source/core/IPFrame.h
--- wpeframework.orig/Source/core/IPFrame.h	2020-09-10 22:43:15.000000000 +0530
+++ wpeframework/Source/core/IPFrame.h	2020-09-14 18:40:37.073250501 +0530
@@ -193,7 +193,7 @@
         ~TCPFrameType() = default;
 
     public:
-        inline NodeId& Source() const {
+        inline const NodeId& Source() const {
             const tcphdr* tcpHeader = reinterpret_cast<const tcphdr*>(Base::Frame());
             NodeId result (Base::Source());
             return (result.IsValid() ? NodeId(result, ntohs(tcpHeader->source)) : result);
@@ -205,7 +205,7 @@
                 tcpHeader->source = htons(node.PortNumber());
             }
         }
-        inline NodeId& Destination() const {
+        inline const NodeId& Destination() const {
             const tcphdr* tcpHeader = reinterpret_cast<const tcphdr*>(Base::Frame());
             NodeId result(Base::Destination());
             return (result.IsValid() ? NodeId(result, ntohs(tcpHeader->dest)) : result);
@@ -253,7 +253,7 @@
         ~UDPFrameType() = default;
 
     public:
-        inline NodeId& Source() const {
+        inline const NodeId& Source() const {
             const udphdr* udpHeader = reinterpret_cast<const udphdr*>(Base::Frame());
             NodeId result(Base::Source());
             return (result.IsValid() ? NodeId(result, ntohs(udpHeader->source)) : result);
@@ -265,7 +265,7 @@
                 udpHeader->source = htons(node.PortNumber());
             }
         }
-        inline NodeId& Destination() const {
+        inline const NodeId& Destination() const {
             const udphdr* udpHeader = reinterpret_cast<const udphdr*>(Base::Frame());
             NodeId result(Base::Destination());
             return (result.IsValid() ? NodeId(result, ntohs(udpHeader->dest)) : result);
